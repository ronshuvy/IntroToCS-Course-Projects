import re
import inspect

import nonogram


def test_imports():
    code = inspect.getsource(nonogram)
    for forbidden_module in ['re', 'ex8_helper']:
        assert not re.findall(rf'import\s+{forbidden_module}\s', code), \
            f"Shouldn't import this module: {forbidden_module}"


def test_get_row_variations(capsys):
    for (row, blocks), variations in (
            # empty row
            (([], []), []),
            # full row
            (([1, 1, 0], [2]), [[1, 1, 0]]),
            # all options
            (([-1, -1, -1], [1]), [[1, 0, 0],
                                   [0, 1, 0],
                                   [0, 0, 1], ]),
            # all options 2
            (([-1, -1, -1], [2]), [[1, 1, 0],
                                   [0, 1, 1]]),
            # simple one
            (([-1, -1, -1, -1, -1, -1, -1, -1], [2, 3, 1]),
             [[1, 1, 0, 1, 1, 1, 0, 1]]),
            # hard one
            (([-1, -1, -1, -1, -1, -1, -1, -1], [1, 2, 1]),
             [
                 [1, 0, 1, 1, 0, 1, 0, 0],
                 [1, 0, 1, 1, 0, 0, 1, 0],
                 [1, 0, 1, 1, 0, 0, 0, 1],
                 [1, 0, 0, 1, 1, 0, 1, 0],
                 [1, 0, 0, 1, 1, 0, 0, 1],
                 [1, 0, 0, 0, 1, 1, 0, 1],
                 [0, 1, 0, 1, 1, 0, 1, 0],
                 [0, 1, 0, 1, 1, 0, 0, 1],
                 [0, 1, 0, 0, 1, 1, 0, 1],
                 [0, 0, 1, 0, 1, 1, 0, 1],
             ]),
    ):
        actual = nonogram.get_row_variations(row, blocks)
        assert sorted(actual) == sorted(variations), \
            f"Input:\n" \
            f"row: {row}, blocks: {blocks}\n" \
            f"Expected: {variations}\n" \
            f"Actual: {actual}"
        out, err = capsys.readouterr()
        assert not out and not err, f"Don't print. out: '{out}', err: '{err}'"


def test_get_intersection_row(capsys):
    for rows, intersection in (
            # no rows
            ([], []),
            # empty row
            ([[]], []),
            # empty rows
            ([[], []], []),
            # one row
            ([[1, 0, -1, 0, 1]], [1, 0, -1, 0, 1]),
            # row with unknown
            ([
                 [1, 0, -1],
                 [-1, 0, 1]
             ], [-1, 0, -1]
            ),
            # row with other values
            ([
                 [-1, 0, 1, 1],
                 [1, 1, 1, 1]
             ], [-1, -1, 1, 1]
            ),
            # many rows
            ([
                 [1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 0],
                 [1, 1, 1, 0, 1],
                 [1, -1, 1, 0, 0],
             ], [1, -1, 1, 0, -1]
            ),
    ):
        actual = nonogram.get_intersection_row(rows)
        assert actual == intersection, f"Input: {rows}\n" \
                                       f"Expected: {intersection}\n" \
                                       f"Actual: {actual}"

        out, err = capsys.readouterr()
        assert not out and not err, f"Don't print. out: '{out}', err: '{err}'"


def test_conclude_from_constraints(capsys):
    for (board, constraints), solution in (
            # no board
            (([], [[], []]), []),
            # no rows
            (([[-1], [-1], [-1], [-1], [-1], [-1], ],
              [[[], [1], [1], [], [1], []], [[2, 1]]]),
             [[0], [1], [1], [0], [1], [0]]),
            # no cols
            (([[-1, -1, -1, -1, -1, -1]],
              [[[2, 1]], [[], [1], [1], [], [1], []]]), [[0, 1, 1, 0, 1, 0]]),
            # sanity
            ((
                     [
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                     ],
                     [
                         [[1, 1], [2], [1, 3], [1, 2], [2]],
                         [[4], [1], [1], [1, 3], [3]]
                     ]
             ),
             [
                 [1, 0, 0, 1, 0],
                 [1, 1, 0, 0, 0],
                 [1, 0, 1, 1, 1],
                 [1, 0, 0, 1, 1],
                 [0, 0, 0, 1, 1],
             ]),
            # not till end
            ((
                     [
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                     ],
                     [
                         [[1, 1], [2], [1, 2], [1, 2], [2]],
                         [[4], [1], [1], [1, 3], [2]]
                     ]
             ),
             [
                 [1, 0, 0, 1, 0],
                 [1, 1, 0, 0, 0],
                 [1, 0, -1, 1, -1],
                 [1, 0, 0, 1, 1],
                 [0, 0, -1, 1, -1],
             ]),
            # with values
            ((
                     [
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, 1, -1, -1],
                         [-1, -1, -1, -1, -1],
                         [-1, -1, -1, -1, -1],
                     ],
                     [
                         [[1, 1], [2], [1, 2], [1, 2], [2]],
                         [[4], [1], [1], [1, 3], [2]]
                     ]
             ),
             [
                 [1, 0, 0, 1, 0],
                 [1, 1, 0, 0, 0],
                 [1, 0, 1, 1, 0],
                 [1, 0, 0, 1, 1],
                 [0, 0, 0, 1, 1],
             ]),

    ):
        actual = [row[:] for row in board]
        ret = nonogram.conclude_from_constraints(actual, constraints)
        assert ret is None, f"conclude_from_constraints should return None, " \
                            f"but returned {ret}"
        assert actual == solution, \
            f"Input:\n" \
            f"board: {board}\n" \
            f"constraints: {constraints}\n" \
            f"Expected: {solution}\n" \
            f"Actual: {actual}"

        out, err = capsys.readouterr()
        assert not out and not err, f"Don't print. out: '{out}', err: '{err}'"


def test_solve_easy_nonogram(capsys):
    for constraints, solution in (
            (
                    (
                            [[[4], [3, 1], [2, 1, 1], [1, 2, 1], [2, 2, 1, 1],
                              [3, 1, 1, 1], [1, 1, 1, 2], [3, 5], [1, 1, 2],
                              [2, 2, 1], [1, 3, 1], [3, 1], [1, 1], [4], [4]],
                             [[5, 2, 2], [3, 2, 1, 1, 3], [2, 1, 5, 2],
                              [1, 1, 3, 1, 2], [1, 2, 8], [2, 1, 1, 1, 1],
                              [1, 3],
                              [1, 1, 4], [1, 2], [2]]],
                            [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                             [1, 1, 0, 1, 0, 1, 0, 0, 0, 0],
                             [1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                             [1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 1, 1, 0, 1, 0, 1, 0, 1],
                             [1, 0, 0, 1, 0, 0, 1, 0, 1, 1],
                             [1, 1, 1, 0, 1, 1, 1, 1, 1, 0],
                             [0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
                             [0, 1, 1, 0, 1, 1, 0, 1, 0, 0],
                             [1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
                             [1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
                             [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
                             [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                             [0, 0, 1, 1, 1, 1, 0, 0, 0, 0]]
                    ),
                    (
                            [[[6], [13], [5], [13], [1, 11, 1],
                              [1, 1, 1, 1, 1, 1, 1], [11]],
                             [[1], [1, 1], [2, 1], [2, 4], [5, 1], [7], [5, 1],
                              [7], [5, 1], [1, 4], [1, 2, 1], [1, 4],
                              [1, 2, 1], [1, 1, 1], [1, 1], [1]]],
                            [[0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                             [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                             [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                             [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]]
                    ),
                    (
                            [[[5], [2, 2], [5], [5], [3], [1], [1], [1], [1],
                              [1], [1], [1], [1], [1], [1], [3], [2], [2], [2],
                              [1]], [[4], [5, 2, 1], [1, 18], [5, 1, 1], [4]]],
                            [[1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1],
                             [1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 0, 1, 0, 0],
                             [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0],
                             [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0],
                             [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0],
                             [0, 1, 1, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0],
                             [0, 1, 1, 0, 0], [0, 0, 1, 0, 0]]
                    ),
                    (
                            [[[2], [2, 1], [1, 3], [1, 1, 1, 1], [1, 1, 5],
                              [1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1],
                              [1, 1, 1, 1],
                              [1, 1, 4, 3], [4, 3, 2], [1, 1, 1, 1, 1],
                              [7, 2, 1],
                              [1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1],
                              [1, 1, 5, 3],
                              [1, 1, 5, 1, 1], [1, 1, 2, 2, 1, 1],
                              [1, 1, 2, 2, 1, 1], [1, 1, 1, 1, 5],
                              [1, 1, 2, 2, 1, 1]],
                             [[1, 2], [6, 9], [1, 1], [16], [1, 1, 1],
                              [1, 7, 1],
                              [2, 1, 2, 6], [2, 2, 2], [1, 2, 2, 6],
                              [1, 1, 1, 1, 6, 1], [2, 3, 2, 1, 1],
                              [1, 1, 1, 2, 10], [4, 2, 2, 1, 1, 1], [11],
                              [1]]],
                            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0],
                             [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                             [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                             [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                             [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0],
                             [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                             [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
                             [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                             [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
                             [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                             [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                             [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
                             [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0]]
                    ),
                    (
                            [[[5, 1], [6, 2], [1, 2, 2, 1, 1], [7],
                              [2, 2, 1, 1],
                              [1, 1, 3], [4, 2], [1, 1, 4], [11], [1, 7],
                              [1, 3, 4], [2, 1, 4, 3], [1, 4, 1, 1, 3],
                              [1, 4, 1, 1, 2], [2, 2, 4], [6], [3, 4],
                              [1, 3, 3], [4, 2], [3, 2]],
                             [[2], [1, 1], [2, 3, 4], [2, 2, 2, 2, 2],
                              [4, 1, 1, 4, 2], [4, 2, 2, 3, 4],
                              [2, 1, 1, 2, 6], [5, 3, 4, 3], [5, 4, 2],
                              [1, 1, 1, 2, 2, 3], [2, 2, 3, 4, 1], [4, 7],
                              [1, 6, 3], [1, 7], [1, 6]]],
                        [
                            [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, -1, 0, -1, -1, -1],
                            [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0],
                            [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, -1, 0, -1, -1, -1],
                            [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                            [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, -1, -1, -1],
                            [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                            [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0],
                            [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                            [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1],
                            [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
                            [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                            [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1],
                            [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1],
                            [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
                            [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
                            [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],
                            [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0]]
                    )
            )
    ):
        actual = nonogram.solve_easy_nonogram(constraints)
        assert actual == solution, \
            f"Input:\n" \
            f"constraints: {constraints}\n" \
            f"Expected: {solution}\n" \
            f"Actual: {actual}"

        out, err = capsys.readouterr()
        assert not out and not err, f"Don't print. out: '{out}', err: '{err}'"


def test_solve_nonogram(capsys):
    for constraints, solution in (
            (
                    [[[2], [2, 1], [1, 3], [1, 1, 1, 1], [1, 1, 5],
                      [1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1],
                      [1, 1, 1, 1],
                      [1, 1, 4, 3], [4, 3, 2], [1, 1, 1, 1, 1],
                      [7, 2, 1],
                      [1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1],
                      [1, 1, 5, 3],
                      [1, 1, 5, 1, 1], [1, 1, 2, 2, 1, 1],
                      [1, 1, 2, 2, 1, 1], [1, 1, 1, 1, 5],
                      [1, 1, 2, 2, 1, 1]],
                     [[1, 2], [6, 9], [1, 1], [16], [1, 1, 1],
                      [1, 7, 1],
                      [2, 1, 2, 6], [2, 2, 2], [1, 2, 2, 6],
                      [1, 1, 1, 1, 6, 1], [2, 3, 2, 1, 1],
                      [1, 1, 1, 2, 10], [4, 2, 2, 1, 1, 1], [11],
                      [1]]],
                    [
                        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0],
                         [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
                         [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                         [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],
                         [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0],
                         [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                         [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
                         [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                         [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],
                         [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                         [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
                         [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
                         [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0]]
                    ]
            ),
            (
                    [[[1], [1], [1], [1], [1]], [[1], [1], [1], [1], [1]]],
                    [
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 1, 0, 0],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 0, 1, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 1, 0, 0, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [1, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0]],
                        [[0, 0, 0, 0, 1],
                         [0, 0, 0, 1, 0],
                         [0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0]]]
            ),
    ):
        actual = nonogram.solve_nonogram(constraints)
        assert sorted(actual) == sorted(solution), \
            f"Input:\n" \
            f"constraints: {constraints}\n" \
            f"Expected: {solution}\n" \
            f"Actual: {actual}"

        out, err = capsys.readouterr()
        assert not out and not err, f"Don't print. out: '{out}', err: '{err}'"