from time import time
from nonogram import *


GRAFIC = {1: '■', 0: '·', -1: '?'}


def print_board(board):
    board_str = ""
    for line in board:
        for square in line:
            board_str += GRAFIC[square]+" "
        board_str += "\n"
    print()
    print(board_str, end="")
    print()


constraints = { "board 15x22": [[[3],[4],[4,1],[2,1,1],[4],[1,1,4],[1,1,1,2],[2,1,2,2],[4,2,1,1],[1,2,2,1,1],[2,1,2,1],[1,7,2],[1,1,2],[1,2,2],[12],[2,1,1],[2,2,1],[2,5],[2,1,1],[3,3,3],[2,1,1,1,1],[3,3]],[[5],[1,3,1],[2,2,6],[1,5,11],[5,2,1,2,2],[3,1,1,1,1],[2,5,1,3,3],[3,2,1,1,4,1],[1,1,1,1,3],[3,2,1,1],[1,4,1,1,3],[1,7,1],[2,2,3],[2,2],[5]]],
                "board 29x28": [[[6,2,1],[12,2],[12,2],[1,6,2],[9,2],[7,2],[2,6,2],[2,3],[6,4],[12],[6,3],[11],[12],[13],[14],[15],[15],[13],[2,11],[4,11],[6,10],[7,9],[8,8],[9,5],[8,3],[6,1],[4],[2]],[[2],[3],[5],[7],[7],[2,7],[2,6],[2,6],[3,5,5],[3,2,7,4],[7,8,3,2],[6,11,3],[7,10,4],[24],[23],[6,2,13],[3,1,1,2,12],[2,1,1,14],[1,15],[3,10],[3,9],[3,7],[2,6],[2,4],[2],[2],[2],[2],[2]]],
                "board 31×31": [[[5,2,3,2,1,1,7],[3,1,5,1,1,1,7],[2,5,3,2,3,2],[1,2,3,3,2,3,2,1],[1,2,1,2,5,3,5,1],[1,2,2,3,1,2,1,6,1],[3,4,3,1,6,1],[1,8,4,8,1],[3,6,6,1,5,2],[2,1,4,3,3,2,1,2,2],[4,4,2,2,2,1,2],[3,6,3,1,1,1,1],[11,1,1,2,1,1],[2,2,2,1,2,1,2,1],[2,3,2,1,4,3,1],[2,5,3,6,4,1],[3,2,1,5,4,1],[5,1,1,2,5,4,1],[3,4,1,1,5,4,1],[7,3,5,5,1],[1,9,2,4,4,1],[9,1,1,1,2,3,1],[6,1,2,1,2],[1,3,1,2,1,3,1],[6,8,1,1,1,5],[5,7,3,1,5,1],[5,7,3,1,1,2],[4,6,1,1,4,2],[3,4,2,4,4],[3,1,10,4,4],[3,15,2,4]],[[6,2,6,1,8],[3,5,6,1,7],[2,3,1,2,3,2,7],[1,5,3,2,1,3,4],[1,2,3,1,4,1,4,3,1],[1,1,3,2,2,4,1,1],[2,1,3,3,1,5,3,1],[1,3,4,3,1,5,4,1],[1,2,5,2,2,4,5,1],[1,6,5,4,4,1],[3,4,4,2,5,2],[4,3,2,1,1,1,5,2],[11,2,2,1,4,2],[1,2,3,2,6,1,2,3],[1,1,7,2,2,4],[1,4,5,6,1,2],[1,3,2,3,2,1,1,2],[2,1,4,2],[1,8,2,2],[1,3,1,1,7,1,2,2],[5,1,1,1,8,1,1],[1,3,2,2,8,4],[1,3,5,2,3],[4,1,1,1,1,3],[2,9,4,1,3],[2,5,7,2,1],[2,7,1,8,4],[2,5,2,8,4,3],[2,3,8,3,3],[3,3,1,4],[22,1,1,4]]],
                "board 35×35": [[[1,1,14,3],[2,1,6,3,1,3],[3,5,4,3,3],[2,2,3,6,2,1,1],[1,2,3,5,1,1,1],[3,1,2,6,3,2,1],[2,2,2,6,2,3],[4,6,1,2,2],[3,6,1,3,1],[2,1,1,1,1,6],[5,1,1,2,1,3],[1,2,1,2,4,2,1,1,2],[3,2,1,2,9,5,1],[1,2,4,8,5,4],[3,3,1,2,2,1,2,1,2],[2,2,2,1,2,4,3,3],[4,1,3,2,6,4,3],[1,2,4,1,8,3,3],[3,2,10,6],[1,2,12,3,1],[3,1,8,4],[3,8,3,1,2],[5,3,3,3,1,1,1],[4,1,3,1,1,1,1,2,1,1],[7,2,2,1,1,5,3,1],[6,1,5,1,1,1,1,1,1,1,1],[3,1,1,1,2,2,1,1,1,1,1,3],[1,5,3,1,1,2,1,1,1,5],[2,1,1,1,2,2,1,1,6,4],[1,1,1,1,3,1,1,1,4,4],[2,6,2,2,2,3],[4,3,19],[5,3,4,5]],[[20,1,2],[3,6,1,3,1,2,1,3],[1,1,2,2,5,3,8],[1,2,2,3,1,3,3,2],[1,1,1,1,2,2,1,1],[1,1,3,9],[2,2,1,2],[3,1,3,10],[3,5,1,3,1,1],[4,1,2,7],[2,2,2,3,1,1],[2,3,3,1,13],[3,11,2,9],[2,2,2,2,1,1,1,1,1],[2,2,1,3,3,1,1,3],[3,2,2,2,12],[3,2,4,4,2],[2,2,3,2,1,1,2,2],[2,2,3,3,1,2,2,1],[2,3,2,4,2,1,1],[1,2,2,5,11],[1,2,2,9,2],[1,2,2,7,6,2],[1,2,2,6,1,1,2,2],[1,2,1,1,5,1,6,2],[3,2,2,4,1,1,2,2],[2,3,1,4,3,7,2],[2,4,1,1,2,3,1,1],[1,2,1,2,3,3,2,1],[1,2,4,3,3,3,2],[2,3,2,4,2,2,2],[1,3,1,1,2,4,7],[3,2,2,7,3,4],[3,2,2,4,2,3],[3,4,3,11,2]]],
                "board 41x31": [[[8],[1,2],[1,2],[2,2,3],[1,3,1,1,4],[3,3],[1,1,3],[2,1,1,4],[2,1,1,2,10],[1,1,1,1,1,5,3],[1,1,3,7,5],[2,1,2,6,3],[4,1,2,6,2],[3,1,3,6,2],[3,2,3,6,2],[4,8,6,1],[5,7,8,1],[6,5,4,4,1],[8,4,4,1],[9,3,3,2],[12,2,1,2,2],[1,6,3,2,2,3],[1,6,5,3,2,2,4],[1,7,6,2,2,5],[1,10,3,1,1,2,6],[1,13,1,2,3,5,2],[2,13,2,4,10],[1,6,3,10,3],[3,16,1,6,1],[1,3,14,2,3],[15,2,3,3]],[[7,2],[3,3],[5,2],[8,1],[11,2],[13,1],[17,1],[3,14],[3,6,13],[2,4,3,2,8],[1,2,1,2,2,8],[1,1,1,2,2,7],[1,1,3,2,3,3],[1,3,3,1,3,3],[1,1,2,3,1,2,3],[1,1,3,4,1,2,3],[1,2,2,8,1,2,3],[1,1,4,1,2,3],[2,2,1,2,2,1,3],[7,3,1,2,2],[10,3,3,4],[7,3,2,3,1],[5,4,7],[11,2,3],[10,5,2],[1,7,2,3,1],[1,8,1,3],[1,9,4],[1,14,2],[2,13],[1,3],[2,4],[1,2,1],[1,3,2],[1,2,1],[2,3,1],[1,4],[2,5],[2,4,2],[2,7,1],[12,2]]],
                }

if __name__ == "__main__":
    time_str={}
    start_a=time()
    for name, const in constraints.items():
        print("▬"*100,"\nstarting to solve",name)
        start = time()
        board=solve_easy_nonogram(const)
        time_pass=time()-start
        if time_pass>=60:
            time_str[name]=str(int(time_pass//60))+" min and "+"{:.4f}".format(time_pass%60)+" sec"
        else:
            time_str[name]="{:.4f}".format(time_pass)+" sec"
        print("board solved!\ntook",time_str[name], "to solve it and here what we got:")
        print_board(board)
    time_pass=time()-start_a
    for t in time_str.items():
        print(t)
    print("\nall over:")
    if time_pass>=60:
        time_a=str(int(time_pass//60))+" min and "+"{:.4f}".format(time_pass%60)+" sec"
    else:
        time_a="{:.4f}".format(time_pass)+" sec"
    print(time_a)
